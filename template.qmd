---
title: "Final Project Report"
author: "Wanqi Yuan (wy21) & Jonathan Gan (wg18)"
jupyter: julia-1.10
date: 2024-04-30

# YOU DO NOT NEED BOTH PDF AND DOCX.
# COMMENT OR DELETE THE ONE YOU DON'T WANT TO USE.
#
# Feel free to customize the look of your final document:
# https://quarto.org/docs/reference/formats/pdf.html
# https://quarto.org/docs/reference/formats/docx.html

format: 
    pdf:
        documentclass: article
        fontsize: 11pt
        geometry:
            - margin=1in  
        number-sections: true
        code-line-numbers: true
    # docx: 
    #    toc: true
    #    fig-format: png
    #    number-sections: true
    #    code-line-numbers: true

date-format: "ddd., MMM. D"

# See Quarto docs: https://quarto.org/docs/authoring/footnotes-and-citations.html
# you can export your references from Zotero, EndNote, or other reference managers
# from Zotero you'll need https://retorque.re/zotero-better-bibtex/
references: references.bib

# recommended, but not required
# you will need jupyter-cache installed
execute: 
  cache: true
---

# Introduction

## Problem Statement

The parking garage problem is currently structured to assume that demand is deterministic and constant. This is not representative of real world conditions as demand is highly dynamic and will change in response to various city conditions. For our final project, we want to better capture the variance in demand for parking, particularly in Houston. 
We will explore through research the relationship between price of parking and the demand of parking to implement into our get_action function. We will mathematically represent this relationship through a equation derived from our research. 
We will be considering the case where we are taking yearly time steps to represent a garage that rents out spots on a yearly basis. At the end of each year, we will evaluate whether demand of that year given the elasticity of demand, exceeds capacity enough to justify building an additional level. We will analyze this case for multiple demand vs. price curve.

Demand is a quantifiable variable for many cases outsid eof parking that determine whether a given action will be taken. By more accurately modeling this relationship between how the price of *something* might change the demand of it, and therefore the construction that might take place as a result, we can apply this to other climate scenarios that would require sequential decision making. For example, the decision to expand a solar farm on a an annual basis dependent on the demand of the energy for the clients it serve. 


## Selected Feature

Describe the feature you have selected to add to the existing decision-support tool.
Discuss how this feature relates to the problem statement and its potential to improve climate risk assessment.

# Literature Review

Provide a brief overview of the theoretical background related to your chosen feature.
Cite at least two relevant journal articles to support your approach (see [Quarto docs](https://quarto.org/docs/authoring/footnotes-and-citations.html) for help with citations).
Explain how these articles contribute to the justification of your selected feature.

# Methodology

## Implementation

You should make your modifications in either the `HouseElevation` or `ParkingGarage` module.
Detail the steps taken to implement the selected feature and integrate it into the decision-support tool.
Include code snippets and explanations where necessary to clarify the implementation process.

## Validation

As we have seen in labs, mistakes are inevitable and can lead to misleading results.
To minimize the risk of errors making their way into final results, it is essential to validate the implemented feature.
Describe the validation techniques used to ensure the accuracy and reliability of your implemented feature.
Discuss any challenges faced during the validation process and how they were addressed.

# Results

Present the results obtained from the enhanced decision-support tool.
Use tables, figures, and visualizations to clearly communicate the outcomes.
Provide sufficient detail to demonstrate how the implemented feature addresses the problem statement.
Use the `#| output: false` and/or `#| echo: false` tags to hide code output and code cells in the final report except where showing the output (e.g.g, a plot) or the code (e.g., how you are sampling SOWs) adds value to the discussion.
You may have multiple subsections of results, which you can create using `##`.


# Conclusions

## Discussion

Analyze the implications of your results for climate risk management.
Consider the context of the class themes and discuss how your findings contribute to the understanding of climate risk assessment.
Identify any limitations of your approach and suggest potential improvements for future work.

## Conclusions

Summarize the key findings of your project and reiterate the significance of your implemented feature in addressing the problem statement.
Discuss the broader implications of your work for climate risk management and the potential for further research in this area.

# References

:::{#refs}
:::

```{julia}
using Plots
using Distributions
Plots.default(; margin=5Plots.mm)
```

```{julia}
function get_profit(capacity, m, b, cost)

    # Cost is cost per spot 
    price = div(capacity - b, m) # Floor Div for dollars
    return (price * capacity)-(cost * capacity)
end
```

```{julia}

function optimize(maxSpots, increment, start_spots, m, cost_per_spot)
    b = maxSpots
    levels_to_add = div(maxSpots - start_spots, increment)
    optLevels = 0 
    optProfit = get_profit(start_spots, m, b, cost_per_spot)
    curr_levels = 0
    while curr_levels < levels_to_add
        curr_capacity = start_spots + curr_levels * increment
        profit = get_profit(curr_capacity, m, b, cost_per_spot)
        if profit > optProfit
            optProfit = profit
            optLevels = curr_levels
        end
        curr_levels += 1
    end
    return optLevels
end
```


```{julia}

function simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
    y_levels = [] # LEVELS AT TIMETSTEP T
    y_curr_profit = [] # PROFIT AT TIMESTEP T
    y_net_profit = [] # NET PROFITS
    net_profit = 0
    curr_levels = 0
    timestep = 0
    curr_spots = start_spots
    b = init_b

    while timestep < timesteps
        levels_to_add = optimize(b, increment, curr_spots, m, cost_per_spot)
        if levels_to_add == 0
            # println("Whoops")
        end
        curr_spots += increment * levels_to_add
        curr_levels += levels_to_add

        curr_profit = get_profit(curr_spots, m, b, cost_per_spot) / 1000
        net_profit += curr_profit
        push!(y_curr_profit, curr_profit)
        push!(y_net_profit, net_profit)
        push!(y_levels, curr_levels)

        b *= (1 + demand_growth_rate)
        m /= (1 + inflation_rate)

        timestep += 1 
    end

    return y_levels
end
```

INCREMENT = 100
Inflation Rate = 0.04
Construction Cost = 30000
```{julia}
timesteps = 25 
start_spots = 0
increment = 100
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.04
cost_per_spot = 30000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

INCREMENT = 150
Inflation Rate = 0.04
Construction Cost = 30000
```{julia}
#| echo: false
timesteps = 25 
start_spots = 0
increment = 150
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.04
cost_per_spot = 30000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

INCREMENT = 200
Inflation Rate = 0.04
Construction Cost = 30000
```{julia}
#| echo: false
timesteps = 25 
start_spots = 0
increment = 200
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.04
cost_per_spot = 30000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

Increment = 150
INFLATION RATE = 0.03
Construction Cost = 30000
```{julia}
timesteps = 25 
start_spots = 0
increment = 150
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.03
cost_per_spot = 30000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

Increment = 150
INFLATION RATE = 0.04
Construction Cost = 30000
```{julia}
#| echo: false
timesteps = 25 
start_spots = 0
increment = 150
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.04
cost_per_spot = 30000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

Increment = 150
INFLATION RATE = 0.05
Construction Cost = 30000
```{julia}
#| echo: false
timesteps = 25 
start_spots = 0
increment = 150
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.05
cost_per_spot = 30000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

Increment = 150
Inflation Rate = 0.04
CONSTRUCTION COST = 20000
```{julia}
timesteps = 25 
start_spots = 0
increment = 150
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.04
cost_per_spot = 20000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

Increment = 150
Inflation Rate = 0.04
CONSTRUCTION COST = 30000
```{julia}
#| echo: false
timesteps = 25 
start_spots = 0
increment = 150
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.04
cost_per_spot = 30000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```

Increment = 150
Inflation Rate = 0.04
CONSTRUCTION COST = 40000
```{julia}
#| echo: false
timesteps = 25 
start_spots = 0
increment = 150
demand_growth_rate = rand(Normal(0.0045, 0.001))
init_b = 1500
m = -0.046
inflation_rate = 0.04
cost_per_spot = 40000
y_levels = simulation(timesteps, start_spots, increment, demand_growth_rate, init_b, m, inflation_rate, cost_per_spot)
display_growth_rate = round(demand_growth_rate, sigdigits=3)
plot_title = "Parking Garage Simulation"
font_size = 16
println(y_levels)
plot(y_levels, label="Optimal Levels at Time t", xlabel="Year", ylabel="Number of Levels",
title=plot_title, titlefontsize=font_size, lw=1, gridlinewidth=1, xticks=0:1:25, yticks=0:1:100)
# plot(y_curr_profit, label="Current Annual Profit at time t")
# plot(y_net_profit, label="Net Profit at time t")
# legend()
#display()
```